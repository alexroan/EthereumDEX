{"version":3,"sources":["store/actions.js","store/interactions/web3.js","helpers.js","store/interactions/contracts.js","store/selectors/web3.js","components/Navbar.js","store/selectors/contracts.js","store/interactions/subscriptions.js","store/interactions/orders.js","store/selectors/decorators/orders.js","store/selectors/orders.js","components/Spinner.js","components/Trades.js","components/OrderBook.js","components/MyTransactions.js","components/PriceChart.config.js","store/selectors/decorators/priceChart.js","store/selectors/priceChart.js","components/PriceChart.js","components/BalanceForm.js","components/BalanceTable.js","components/Balance.js","components/OrderForm.js","components/NewOrder.js","components/Content.js","components/App.js","store/reducers.js","store/configureStore.js","serviceWorker.js","index.js"],"names":["web3AccountLoaded","account","type","tokenLoaded","token","exchangeLoaded","exchange","cancelledOrdersLoaded","cancelledOrders","ordersLoaded","orders","tradesLoaded","trades","tokenBalanceLoaded","balance","exchangeEtherBalanceLoaded","exchangeTokenBalanceLoaded","loadWeb3","dispatch","web3","Web3","givenProvider","connection","loadAccount","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","accounts","wrap","_context","prev","next","eth","getAccounts","sent","abrupt","stop","_x","_x2","apply","this","arguments","ETHER_ADDRESS","RED","DECIMALS","Math","pow","tokens","wei","ether","formatBalance","round","loadToken","networkId","Contract","Token","abi","networks","address","t0","window","alert","_x3","loadExchange","_ref2","_callee2","_context2","Exchange","_x4","_x5","_x6","loadBalances","_ref3","_callee3","etherBalance","tokenBalance","exchangeEtherBalance","exchangeTokenBalance","_context3","getBalance","methods","balanceOf","call","options","_x7","_x8","_x9","_x10","_x11","depositEther","_ref4","_callee4","etherDepositAmount","amount","_context4","utils","toWei","send","from","value","on","hash","err","console","log","_x12","_x13","_x14","_x15","_x16","withdrawEther","_ref5","_callee5","etherWithdrawAmount","_context5","_x17","_x18","_x19","_x20","_x21","depositToken","_ref6","_callee6","_context6","approve","_x22","_x23","_x24","_x25","_x26","_x27","withdrawToken","_ref7","_callee7","tokenWithdrawAmount","_context7","_x28","_x29","_x30","_x31","_x32","_x33","web3Selector","createSelector","state","get","w","accountSelector","etherBalanceSelector","Navbar","react_default","createElement","className","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","props","target","rel","Component","connect","tokenSelector","tl","t","exchangeSelector","el","e","contractsLoadedSelector","balancesLoadingSelector","bl","tokenBalanceSelector","exchangeEtherBalanceSelector","exchangeTokenBalanceSelector","etherDepositAmountSelector","eda","etherWithdrawAmountSelector","ewa","tokenDepositAmountSelector","tda","tokenWithdrawAmountSelector","twa","subscribeToEvents","events","Cancel","error","event","order","returnValues","Trade","Deposit","Withdraw","Order","loadAllOrders","cancelStream","tradeStream","orderStream","getPastEvents","fromBlock","toBlock","map","decorateMyFilledOrder","orderType","_user","_tokenGive","objectSpread","orderTypeClass","orderSign","decorateMyOpenOrder","decorateOrderBookOrder","orderFillAction","decorateFilledOrders","previousOrder","decorateOrder","decorateFilledOrder","etherAmount","tokenAmount","_amountGive","_amountGet","tokenPrice","formattedTimestamp","moment","unix","_timestamp","format","tokenPriceClass","price","col","co","ol","filledOrdersLoaded","o","filledOrdersLoadedSelector","filledOrders","filledOrdersSelector","sort","b","openOrders","all","cancelled","filled","reject","orderFilled","some","_id","orderCancelled","orderBookLoaded","orderBookLoadedSelector","obl","orderBookSelector","decorateOrderBookOrders","groupBy","buyOrders","sellOrders","myFilledOrdersLoadedSelector","loaded","myFilledOrdersSelector","decorateMyFilledOrders","filter","_userFill","myOpenOrdersLoadedSelector","myOpenOrdersSelector","decorateMyOpenOrders","orderCancellingSelector","oc","orderFillingSelector","of","buyOrderSelector","bo","sellOrderSelector","Spinner","Trades","concat","key","renderOrder","OverlayTrigger","placement","overlay","Tooltip","id","onClick","fillOrder","OrderBook","showOrderBook","orderBook","orderFilling","showMyOpenOrders","myOpenOrders","cancelOrder","MyTransactions","Tabs","defaultActiveKey","Tab","eventKey","title","showMyFilledOrders","myFilledOrders","openOrdersLoaded","orderCancelling","chartOptions","chart","animations","enabled","toolbar","show","width","tooltip","theme","style","fontSize","fontFamily","undefined","x","formatter","y","marker","items","display","fixed","position","offsetX","offsetY","xaxis","labels","colors","cssClass","yaxis","minWidth","maxWidth","color","rotate","buildGraphData","Date","startOf","keys","hour","hourGroup","open","close","length","high","maxBy","low","minBy","priceChartLoadedSelector","priceChartSelector","lastOrder","secondLastOrder","lastPrice","lastPriceChange","series","data","showPriceChart","priceChart","react_apexcharts_min_default","height","PriceChart","showChart","chartData","BalanceForm","_this$props","onSubmit","placeHolder","onChange","buttonText","placeholder","required","BalanceTable","hasHead","tokenName","walletAmount","exchangeAmount","toString","tableRow","Balance","loadBlockchainData","showForm","tokenDepositAmount","components_BalanceTable","components_BalanceForm","preventDefault","balancesLoading","OrderForm","amountOnChange","priceOnChange","buyOrSell","buyOrder","sellOrder","showBuyTotal","showSellTotal","components_OrderForm","tokenGet","amountGet","amountGive","makeOrder","makeBuyOrder","tokenGive","makeSellOrder","NewOrder","making","Content","components_Balance","components_NewOrder","components_OrderBook","components_PriceChart","components_MyTransactions","components_Trades","App","net","getId","components_Navbar","contractsLoaded","components_Content","rootReducer","combineReducers","action","contract","index","toConsumableArray","findIndex","loggerMiddleware","createLogger","middleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","preLoadedState","Boolean","location","hostname","match","ReactDOM","render","es","store","createStore","applyMiddleware","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52c5a1a9.chunk.js","sourcesContent":["export function web3Loaded(connection){\n    return {\n        type: 'WEB3_LOADED',\n        connection\n    }\n}\n\nexport function web3AccountLoaded(account){\n    return {\n        type: 'WEB3_ACCOUNT_LOADED',\n        account\n    }\n}\n\nexport function tokenLoaded(token){\n    return {\n        type: 'TOKEN_LOADED',\n        token\n    }\n}\n\nexport function exchangeLoaded(exchange){\n    return {\n        type: 'EXCHANGE_LOADED',\n        exchange\n    }\n}\n\nexport function cancelledOrdersLoaded(cancelledOrders){\n    return {\n        type: 'CANCELLED_ORDERS_LOADED',\n        cancelledOrders\n    }\n}\n\nexport function ordersLoaded(orders){\n    return {\n        type: 'ORDERS_LOADED',\n        orders\n    }\n}\n\nexport function tradesLoaded(trades){\n    return {\n        type: 'TRADES_LOADED',\n        trades\n    }\n}\n\nexport function orderCancelling(){\n    return {\n        type: 'ORDER_CANCELLING',\n    }\n}\n\nexport function orderCancelled(order){\n    return {\n        type: 'ORDER_CANCELLED',\n        order\n    }\n}\n\nexport function orderFilling(){\n    return {\n        type: 'ORDER_FILLING'\n    }\n}\n\nexport function orderFilled(order){\n    return {\n        type: 'ORDER_FILLED',\n        order\n    }\n}\n\nexport function etherBalanceLoaded(balance){\n    return {\n        type: 'ETHER_BALANCE_LOADED',\n        balance\n    }\n}\n\nexport function tokenBalanceLoaded(balance){\n    return {\n        type: 'TOKEN_BALANCE_LOADED',\n        balance\n    }\n}\n\nexport function exchangeEtherBalanceLoaded(balance){\n    return {\n        type: 'EXCHANGE_ETHER_BALANCE_LOADED',\n        balance\n    }\n}\n\nexport function exchangeTokenBalanceLoaded(balance){\n    return {\n        type: 'EXCHANGE_TOKEN_BALANCE_LOADED',\n        balance\n    }\n}\n\nexport function balancesLoaded(){\n    return {\n        type: 'BALANCES_LOADED'\n    }\n}\n\nexport function balancesLoading(){\n    return {\n        type: 'BALANCES_LOADING'\n    }\n}\n\nexport function etherDepositAmountChanged(amount){\n    return {\n        type: 'ETHER_DEPOSIT_AMOUNT_CHANGED',\n        amount\n    }\n}\n\nexport function etherWithdrawAmountChanged(amount){\n    return {\n        type: 'ETHER_WITHDRAW_AMOUNT_CHANGED',\n        amount\n    }\n}\n\nexport function tokenDepositAmountChanged(amount){\n    return {\n        type: 'TOKEN_DEPOSIT_AMOUNT_CHANGED',\n        amount\n    }\n}\n\nexport function tokenWithdrawAmountChanged(amount){\n    return {\n        type: 'TOKEN_WITHDRAW_AMOUNT_CHANGED',\n        amount\n    }\n}\n\nexport function buyOrderAmountChanged(amount) {\n    return {\n        type: 'BUY_ORDER_AMOUNT_CHANGED',\n        amount\n    }\n}\n\nexport function buyOrderPriceChanged(price) {\n    return {\n        type: 'BUY_ORDER_PRICE_CHANGED',\n        price\n    }\n}\n\nexport function buyOrderMaking(){\n    return {\n        type: 'BUY_ORDER_MAKING'\n    }\n}\n\nexport function sellOrderAmountChanged(amount) {\n    return {\n        type: 'SELL_ORDER_AMOUNT_CHANGED',\n        amount\n    }\n}\n\nexport function sellOrderPriceChanged(price) {\n    return {\n        type: 'SELL_ORDER_PRICE_CHANGED',\n        price\n    }\n}\n\nexport function sellOrderMaking(){\n    return {\n        type: 'SELL_ORDER_MAKING'\n    }\n}\n\nexport function orderMade(order){\n    return {\n        type: 'ORDER_MADE',\n        order\n    }\n}","import { web3Loaded, web3AccountLoaded } from '../actions';\nimport Web3 from 'web3';\n\nexport const loadWeb3 = (dispatch) => {\n    const web3 = new Web3(Web3.givenProvider || 'http://localhost:7545');\n    dispatch(web3Loaded(web3));\n    return web3;\n}\n\nexport const loadAccount = async (web3, dispatch) => {\n    const accounts = await web3.eth.getAccounts();\n    const account = accounts[0];\n    dispatch(web3AccountLoaded(account));\n    return account;\n}","export const ETHER_ADDRESS = \"0x0000000000000000000000000000000000000000\";\nexport const GREEN = \"success\";\nexport const RED = \"danger\";\nexport const DECIMALS = (10**18);\n\n//calculate without importing web3\nexport const tokens = (wei) => {\n    if(wei) {\n        return (wei / DECIMALS);\n    }\n}\n\nexport const ether = tokens;\n\nexport const formatBalance = (balance) => {\n    const precision = 100; //2 dm\n    balance = ether(balance);\n    balance = Math.round(balance * precision) / precision;\n    return balance;\n}","import {tokenLoaded, exchangeLoaded, tokenBalanceLoaded, exchangeEtherBalanceLoaded, exchangeTokenBalanceLoaded, balancesLoaded, balancesLoading} from '../actions';\nimport Token from '../../abis/Token.json';\nimport Exchange from '../../abis/Exchange.json';\nimport {ETHER_ADDRESS} from '../../helpers.js';\nimport {etherBalanceLoaded} from '../actions';\n\nexport const loadToken = async (web3, networkId, dispatch) => {\n    try{\n        const token = web3.eth.Contract(Token.abi, Token.networks[networkId].address);\n        dispatch(tokenLoaded(token));\n        return token;\n    }\n    catch (err){\n        window.alert(\"Contract not deployed to current network\");\n    }\n    return null;\n}\n\nexport const loadExchange = async (web3, networkId, dispatch) => {\n    try{\n        const exchange = web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address);\n        dispatch(exchangeLoaded(exchange));\n        return exchange;\n    }\n    catch (err){\n        window.alert(\"Contract not deployed to current network\");\n    }\n    return null;\n}\n\nexport const loadBalances = async (web3, exchange, token, account, dispatch) => {\n    dispatch(balancesLoading());\n    \n    //ether balance\n    const etherBalance = await web3.eth.getBalance(account);\n    dispatch(etherBalanceLoaded(etherBalance));\n\n    //token balance\n    const tokenBalance = await token.methods.balanceOf(account).call();\n    dispatch(tokenBalanceLoaded(tokenBalance));\n    \n    //balance of account on the smart contract\n    const exchangeEtherBalance = await exchange.methods.balanceOf(ETHER_ADDRESS, account).call();\n    dispatch(exchangeEtherBalanceLoaded(exchangeEtherBalance));\n\n    //token balance of account on the smart contract\n    const exchangeTokenBalance = await exchange.methods.balanceOf(token.options.address, account).call();\n    dispatch(exchangeTokenBalanceLoaded(exchangeTokenBalance));\n\n    dispatch(balancesLoaded());\n}\n\nexport const depositEther = async (web3, exchange, account, etherDepositAmount, dispatch) => {\n    const amount = web3.utils.toWei(etherDepositAmount, 'ether');\n    exchange.methods.depositEther.send({from: account, value: amount})\n        .on('transactionHash', (hash) => {\n            dispatch(balancesLoading());\n        })\n        .on('error', (err) => {\n            console.log(err);\n            window.alert(\"error depositing\");\n        });\n}\n\nexport const withdrawEther = async (web3, exchange, account, etherWithdrawAmount, dispatch) => {\n    const amount = web3.utils.toWei(etherWithdrawAmount, 'ether');\n    exchange.methods.withdrawEther(amount).send({from: account})\n        .on('transactionHash', (hash) => {\n            dispatch(balancesLoading());\n        })\n        .on('error', (err) => {\n            console.log(err);\n            window.alert(\"error withdrawing\");\n        });\n}\n\nexport const depositToken = async (web3, exchange, token, account, etherWithdrawAmount, dispatch) => {\n    const amount = web3.utils.toWei(etherWithdrawAmount, 'ether');\n\n    token.methods.approve(exchange.options.address, amount).send({from: account})\n        .on('transactionHash', (hash) => {\n            exchange.methods.depositToken(token.options.address, amount).send({from: account})\n                .on('transactionHash', (hash) => {\n                    dispatch(balancesLoading());\n                })\n                .on('error', (err) => {\n                    console.log(err);\n                    window.alert(\"error depositing token\");\n                });\n        });\n}\n\nexport const withdrawToken = async (web3, exchange, token, account, tokenWithdrawAmount, dispatch) => {\n    const amount = web3.utils.toWei(tokenWithdrawAmount, 'ether');\n    exchange.methods.withdrawToken(token.options.address, amount).send({from: account})\n        .on('transactionHash', (hash) => {\n            dispatch(balancesLoading());\n        })\n        .on('error', (err) => {\n            console.log(err);\n            window.alert(\"error withdrawing\");\n        });\n}","import {get} from 'lodash';\nimport {createSelector} from 'reselect';\nimport {formatBalance} from '../../helpers';\n\nconst web3 = state => get(state, 'web3.connection');\nexport const web3Selector = createSelector(web3, w => w);\n\nexport const account = state => get(state, 'web3.account');\nexport const accountSelector = createSelector(account, a => a);\n\nconst etherBalance = state => get(state, 'web3.balance');\nexport const etherBalanceSelector = createSelector(etherBalance, (balance) => {\n    return formatBalance(balance);\n});","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {accountSelector} from '../store/selectors/web3.js';\n\nclass Navbar extends Component {\n\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n                <a className=\"navbar-brand\" href=\"/#\">Token DEX</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <a \n                            className=\"nav-link small\"\n                            href={'https://etherscan.io/address/' + this.props.account}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            {this.props.account}\n                        </a>\n                    </li>\n                </ul>\n            </nav>\n        );\n    }\n\n}\n\nfunction mapStateToProps(state){\n    return {\n        account: accountSelector(state)\n    }\n}\n\nexport default connect(mapStateToProps)(Navbar);","import {get} from 'lodash';\nimport {createSelector} from 'reselect';\nimport {formatBalance} from '../../helpers';\n\n\nexport const tokenLoaded = state => get(state, 'token.loaded', false);\nexport const tokenLoadedSelector = createSelector(tokenLoaded, tl => tl);\n\nconst token = state => get(state, 'token.contract');\nexport const tokenSelector = createSelector(token, t => t);\n\nexport const exchangeLoaded = state => get(state, 'exchange.loaded', false);\nexport const exchangeLoadedSelector = createSelector(exchangeLoaded, el => el);\n\nexport const exchange = state => get(state, 'exchange.contract', false);\nexport const exchangeSelector = createSelector(exchange, e => e);\n\nexport const contractsLoadedSelector = createSelector(\n    tokenLoaded, \n    exchangeLoaded, \n    (tl, el) => (tl && el)\n);\n\nconst balancesLoading = state => get(state, 'exchange.balancesLoading', false);\nexport const balancesLoadingSelector = createSelector(balancesLoading, bl => bl);\n\nconst tokenBalance = state => get(state, 'token.balance');\nexport const tokenBalanceSelector = createSelector(tokenBalance, (balance) => {\n    return formatBalance(balance);\n});\n\nconst exchangeEtherBalance = state => get(state, 'exchange.etherBalance');\nexport const exchangeEtherBalanceSelector = createSelector(exchangeEtherBalance, (balance) => {\n    return formatBalance(balance);\n});\n\nconst exchangeTokenBalance = state => get(state, 'exchange.tokenBalance');\nexport const exchangeTokenBalanceSelector = createSelector(exchangeTokenBalance, (balance) => {\n    return formatBalance(balance);\n});\n\nconst etherDepositAmount = state => get(state, 'exchange.etherDepositAmount', 0);\nexport const etherDepositAmountSelector = createSelector(etherDepositAmount, eda => eda);\n\nconst etherWithdrawAmount = state => get(state, 'exchange.etherWithdrawAmount', 0);\nexport const etherWithdrawAmountSelector = createSelector(etherWithdrawAmount, ewa => ewa);\n\n\nconst tokenDepositAmount = state => get(state, 'exchange.tokenDepositAmount', 0);\nexport const tokenDepositAmountSelector = createSelector(tokenDepositAmount, tda => tda);\n\nconst tokenWithdrawAmount = state => get(state, 'exchange.tokenWithdrawAmount', 0);\nexport const tokenWithdrawAmountSelector = createSelector(tokenWithdrawAmount, twa => twa);","import {orderCancelled, orderFilled, balancesLoaded, orderMade} from \"../actions\";\n\n//Subscriptions\nexport const subscribeToEvents = async (dispatch, exchange) => {\n    exchange.events.Cancel({}, (error, event) => {\n        dispatch(orderCancelled(event.returnValues))\n    });\n\n    exchange.events.Trade({}, (error, event) => {\n        dispatch(orderFilled(event.returnValues));\n    });\n\n    exchange.events.Deposit({}, (error, event) => {\n        dispatch(balancesLoaded());\n    });\n\n    exchange.events.Withdraw({}, (error, event) => {\n        dispatch(balancesLoaded());\n    });\n\n    exchange.events.Order({}, (error, event) => {\n        dispatch(orderMade(event.returnValues));\n    })\n}","import {\n    cancelledOrdersLoaded,\n    ordersLoaded,\n    tradesLoaded,\n    orderCancelling,\n    orderFilling,\n    buyOrderMaking\n} from \"../actions\";\nimport {ETHER_ADDRESS} from '../../helpers';\n\nexport const loadAllOrders = async (dispatch, exchange) => {\n    try{\n        // Cancelled\n        const cancelStream = await exchange.getPastEvents(\"Cancel\", {fromBlock: 0, toBlock: 'latest'});\n        const cancelledOrders = cancelStream.map((event) => event.returnValues);\n        dispatch(cancelledOrdersLoaded(cancelledOrders));\n        // Trade events (filles)\n        const tradeStream = await exchange.getPastEvents(\"Trade\", {fromBlock: 0, toBlock: 'latest'});\n        const trades = tradeStream.map((event) => event.returnValues);\n        dispatch(tradesLoaded(trades));\n        // Open orders\n        const orderStream = await exchange.getPastEvents(\"Order\", {fromBlock: 0, toBlock: 'latest'});\n        const orders = orderStream.map((event) => event.returnValues);\n        dispatch(ordersLoaded(orders));\n\n    }\n    catch(err){\n        console.log(err);\n    }\n}\n\nexport const cancelOrder = (dispatch, exchange, order, account) => {\n    exchange.methods.cancelOrder(order._id).send({from: account})\n        //only dispatch the redux action once the hash has come back from the blockchain\n        .on('transactionHash', (hash) => {\n            dispatch(orderCancelling());\n        })\n        .on('error', (error) => {\n            console.log(error);\n            window.alert(\"There was an error\");\n        })\n}\n\nexport const fillOrder = (dispatch, exchange, order, account) => {\n    exchange.methods.fillOrder(order._id).send({from: account})\n        //only dispatch the redux action once the hash has come back from the blockchain\n        .on('transactionHash', (hash) => {\n            dispatch(orderFilling());\n        })\n        .on('error', (error) => {\n            console.log(error);\n            window.alert(\"There was an error\");\n        })\n}\n\nexport const makeBuyOrder = (dispatch, exchange, token, web3, order, account) => {\n    const tokenGet = token.options.address;\n    const amountGet = web3.utils.toWei(order.amount, 'ether');\n    const tokenGive = ETHER_ADDRESS;\n    const amountGive = web3.utils.toWei((order.amount * order.price).toString(), 'ether');\n\n    exchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({from: account})\n        .on('transactionHash', (hash) => {\n            dispatch(buyOrderMaking());\n        })\n        .on('error', (error) => {\n            console.log(error);\n            window.alert('Error with making order');\n        });\n}\n\nexport const makeSellOrder = (dispatch, exchange, token, web3, order, account) => {\n    const tokenGet = ETHER_ADDRESS;\n    const amountGet = web3.utils.toWei((order.amount * order.price).toString(), 'ether');\n    const tokenGive = token.options.address;\n    const amountGive = web3.utils.toWei(order.amount, 'ether');\n\n    exchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({from: account})\n        .on('transactionHash', (hash) => {\n            dispatch(buyOrderMaking());\n        })\n        .on('error', (error) => {\n            console.log(error);\n            window.alert('Error with making order');\n        });\n}","import {ether, tokens, GREEN, RED, ETHER_ADDRESS} from '../../../helpers';\nimport moment from 'moment';\n\n//My Transactions\nexport const decorateMyFilledOrders = (orders, account) => {\n    return(\n        orders.map((order) => {\n        order = decorateOrder(order)\n        order = decorateMyFilledOrder(order, account)\n        return(order)\n        })\n    )\n}\n//decorate orders depending on if they are buy or sell\nconst decorateMyFilledOrder = (order, account) => {\n    const myOrder = order._user === account\n\n    let orderType\n    if(myOrder) {\n        orderType = order._tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n    } else {\n        orderType = order._tokenGive === ETHER_ADDRESS ? 'sell' : 'buy'\n    }\n\n    return({\n        ...order,\n        orderType,\n        orderTypeClass: (orderType === 'buy' ? GREEN : RED),\n        orderSign: (orderType === 'buy' ? '+' : '-')\n    })\n}\nexport const decorateMyOpenOrders = (orders, account) => {\n    return(\n        orders.map((order) => {\n        order = decorateOrder(order)\n        order = decorateMyOpenOrder(order, account)\n        return(order)\n        })\n    )\n}\nconst decorateMyOpenOrder = (order, account) => {\n    let orderType = order._tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n  \n    return({\n        ...order,\n        orderType,\n        orderTypeClass: (orderType === 'buy' ? GREEN : RED)\n    })\n}\n\n//Order Book\nexport const decorateOrderBookOrders = (orders) => {\n    return(\n        orders.map((order) => {\n            order = decorateOrder(order);\n            order = decorateOrderBookOrder(order);\n            return order;\n        })\n    )\n}\nconst decorateOrderBookOrder = (order) => {\n    const orderType = order._tokenGive === ETHER_ADDRESS ? 'buy' : 'sell';\n    return ({\n        ...order,\n        orderType,\n        orderTypeClass: (orderType === 'buy') ? GREEN : RED,\n        orderFillAction: (orderType === 'buy') ? 'sell' : 'buy'\n    })\n}\n\n\n//Filled Orders\nexport const decorateFilledOrders = (orders) => {\n    let previousOrder = orders[0];\n    return(orders.map((order) => {\n        order = decorateOrder(order);\n        order = decorateFilledOrder(order, previousOrder);\n        previousOrder = order;\n        return order;\n    }));\n}\n//decorate objects to be readable from events\nconst decorateOrder = (order) => {\n    let etherAmount, tokenAmount;\n    if(order._tokenGive === \"0x0000000000000000000000000000000000000000\") {\n        etherAmount = order._amountGive;\n        tokenAmount = order._amountGet;\n    }\n    else{\n        etherAmount = order._amountGet;\n        tokenAmount = order._amountGive;\n    }\n\n    const precision = 100000;\n    let tokenPrice = (etherAmount / tokenAmount);\n    tokenPrice = Math.round(tokenPrice * precision) / precision;\n\n    return({\n        ...order,\n        etherAmount: ether(etherAmount),\n        tokenAmount: tokens(tokenAmount),\n        tokenPrice,\n        formattedTimestamp: moment.unix(order._timestamp).format('h:mm:ss a M/D')\n    });\n}\n//Specific decorator for filled orders only\n//If higher than previous = green, lower than previous = red\nconst decorateFilledOrder = (order, previousOrder) => {\n    return ({\n        ...order,\n        tokenPriceClass: tokenPriceClass(order.tokenPrice, previousOrder)\n    });\n}\n\nconst tokenPriceClass = (price, previousOrder) => {\n    return (previousOrder.tokenPrice > price) ? RED : GREEN;\n}","import {get, reject, groupBy} from 'lodash';\nimport {createSelector} from 'reselect';\nimport {account} from './web3';\nimport {decorateFilledOrders, \n    decorateOrderBookOrders, \n    decorateMyFilledOrders,\n    decorateMyOpenOrders\n} from './decorators/orders';\n\nexport const cancelledOrdersLoaded = state => get(state, 'exchange.cancelledOrders.loaded', false);\nexport const cancelledOrdersLoadedSelector = createSelector(cancelledOrdersLoaded, col => col);\n\nexport const cancelledOrders = state => get(state, 'exchange.cancelledOrders.data', []);\nexport const cancelledOrdersSelector = createSelector(cancelledOrders, co => co);\n\nexport const ordersLoaded = state => get(state, 'exchange.orders.loaded', false);\nexport const ordersLoadedSelector = createSelector(ordersLoaded, ol => ol);\n\nexport const orders = state => get(state, 'exchange.orders.data', []);\nexport const ordersSelector = createSelector(orders, o => o);\n\nexport const filledOrdersLoaded = state => get(state, 'exchange.orders.loaded', false);\nexport const filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, ol => ol);\n\nexport const filledOrders = state => get(state, 'exchange.trades.data', []);    \nexport const filledOrdersSelector = createSelector(\n    filledOrders, \n    (orders) => {\n        //sort ascending for price comparison\n        orders = orders.sort((a,b) => a._timestamp - b._timestamp);\n        //decorate\n        orders = decorateFilledOrders(orders);\n        //sort descending for display\n        orders = orders.sort((a,b) => b._timestamp - a._timestamp);\n        return orders;\n    } \n);\n\n//Return order that have not been traded (filled) or cancelled\nconst openOrders = state => {\n    const all = orders(state);\n    const cancelled = cancelledOrders(state);\n    const filled = filledOrders(state);\n\n    //reject the orders if they appear in filled or cancelled\n    const openOrders = reject(all, (order) => {\n        const orderFilled = filled.some((o) => o._id === order._id);\n        const orderCancelled = cancelled.some((o) => o._id === order._id);\n        return (orderFilled || orderCancelled);\n    });\n    return openOrders;\n}\nconst orderBookLoaded = state => cancelledOrdersLoaded(state) && filledOrdersLoaded(state) && ordersLoaded(state);\nexport const orderBookLoadedSelector = createSelector(orderBookLoaded, obl => obl);\nexport const orderBookSelector = createSelector(\n    openOrders,\n    (orders) => {\n        //decorate\n        orders = decorateOrderBookOrders(orders);\n        //group by type\n        orders = groupBy(orders, 'orderType');\n        let buyOrders = get(orders, 'buy', []);\n        let sellOrders = get(orders, 'sell', []);\n        orders = {\n            ...orders,\n            buyOrders: buyOrders.sort((a, b) => b.tokenPrice - a.tokenPrice),\n            sellOrders: sellOrders.sort((a, b) => b.tokenPrice - a.tokenPrice)\n        }\n        return orders;\n    }\n)\n\n//If all trades loaded, the my trades are definitely loaded\nexport const myFilledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded);\nexport const myFilledOrdersSelector = createSelector(\n    account,\n    filledOrders,\n    (account, orders) => {\n        // Find our orders\n        orders = orders.filter((o) => o._user === account || o._userFill === account);\n        // Sort by date descending\n        orders = orders.sort((a,b) => b._timestamp - a._timestamp);\n        // Decorate orders - add display attributes\n        orders = decorateMyFilledOrders(orders, account);\n        return orders;\n    }\n)\n\n//If the order book is loaded, my open orders are definitely loaded\nexport const myOpenOrdersLoadedSelector = createSelector(orderBookLoaded, loaded => loaded);\nexport const myOpenOrdersSelector = createSelector(\n    account,\n    openOrders,\n    (account, orders) => {\n        // Filter orders created by current account\n        orders = orders.filter((o) => o._user === account);\n        // Decorate orders - add display attributes\n        orders = decorateMyOpenOrders(orders);\n        // Sort orders by date descending\n        orders = orders.sort((a,b) => b._timestamp - a._timestamp);\n        return orders;\n    }\n)\n\nconst orderCancelling = state => get(state, 'exchange.orderCancelling', false);\nexport const orderCancellingSelector = createSelector(orderCancelling, oc => oc);\n\nconst orderFilling = state => get(state, 'exchange.orderFilling', false);\nexport const orderFillingSelector = createSelector(orderFilling, of => of);\n\nconst buyOrder = state => get(state, 'exchange.buyOrder', {});\nexport const buyOrderSelector = createSelector(buyOrder, bo => bo);\n\nconst sellOrder = state => get(state, 'exchange.sellOrder', {});\nexport const sellOrderSelector = createSelector(sellOrder, bo => bo);","import React from 'react';\n\nexport default function({type}){\n    if(type === 'table') {\n        return (<tbody className=\"spinner-border text-light text-center\"></tbody>);\n    }\n    return (<div className=\"spinner-border text-light text-center\"></div>);\n}","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {filledOrdersSelector, filledOrdersLoadedSelector} from '../store/selectors/orders';\nimport Spinner from './Spinner';\n\nconst showFilledOrders = (filledOrders) => {\n    return (\n        <tbody>\n            {filledOrders.map((order) => {\n                return (\n                    <tr className={`trade-${order._id}`} key={order._id}>\n                        <td className=\"text-muted\">{order.formattedTimestamp}</td>\n                        <td>{order.tokenAmount}</td>\n                        <td className={`text-${order.tokenPriceClass}`}>{order.tokenPrice}</td>\n                    </tr>\n                )\n            })}\n        </tbody>\n    );\n}\n\nclass Trades extends Component {\n    componentWillMount() {\n\n    }\n\n    render() {\n        return (\n            <div className=\"vertical\">\n                <div className=\"card bg-dark text-white\">\n                    <div className=\"card-header\">\n                        Trades\n                    </div>\n                    <div className=\"card-body\">\n                        <table className=\"table table-dark table-sm small\">\n                            <thead>\n                                <tr>\n                                    <th>Time</th>\n                                    <th>DApp</th>\n                                    <th>DApp/Eth</th>\n                                </tr>\n                            </thead>\n                            { this.props.filledOrdersLoaded ? showFilledOrders(this.props.filledOrders) : <Spinner type=\"table\" />}\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        filledOrdersLoaded: filledOrdersLoadedSelector(state),\n        filledOrders: filledOrdersSelector(state)\n    };\n}\n\nexport default connect(mapStateToProps)(Trades);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {orderBookLoadedSelector, orderBookSelector, orderFillingSelector} from '../store/selectors/orders';\nimport {exchangeSelector} from '../store/selectors/contracts';\nimport {accountSelector} from '../store/selectors/web3';\n\nimport Spinner from './Spinner';\nimport { fillOrder } from '../store/interactions/orders';\n\nconst renderOrder = (order, props) => {\n    const { dispatch, exchange, account} = props;\n    return (\n        <OverlayTrigger key={order._id} placement='auto' \n            overlay={\n                <Tooltip id={order._id}>\n                    {`Click here to ${order.orderFillAction}`}\n                </Tooltip>\n            }\n        >\n            <tr key={order._id} className=\"order-book-order\" onClick={(e) => fillOrder(dispatch, exchange, order, account)}>\n                <td>{order.tokenAmount}</td>\n                <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\n                <td>{order.etherAmount}</td>\n            </tr>\n        </OverlayTrigger>\n    )\n}\n\nconst showOrderBook = (props) => {\n    //fetch key from props using ES6\n    const {orderBook} = props;\n    return (\n        <tbody>\n            {orderBook.sellOrders.map((order) => renderOrder(order, props))}\n            <tr>\n                <th>DAPP</th>\n                <th>DAPP/ETH</th>\n                <th>ETH</th>\n            </tr>\n            {orderBook.buyOrders.map((order) => renderOrder(order, props))}\n        </tbody>\n    );\n}\n\nclass OrderBook extends Component {\n    render() {\n        return (\n            <div className=\"vertical\">\n                <div className=\"card bg-dark text-white\">\n                    <div className=\"card-header\">\n                        Order Book\n                    </div>\n                    <div className=\"card-body order-book\">\n                        <table className=\"table table-dark table-sm small\">\n                            {this.props.showOrderBook ? showOrderBook(this.props) : <Spinner type=\"table\"/>}\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state){\n    const orderBookLoaded = orderBookLoadedSelector(state);\n    const orderFilling = orderFillingSelector(state);\n    return {\n        orderBook: orderBookSelector(state),\n        showOrderBook: orderBookLoaded && !orderFilling,\n        exchange: exchangeSelector(state),\n        account: accountSelector(state)\n    }\n}\n\nexport default connect(mapStateToProps)(OrderBook);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Spinner from './Spinner';\nimport {Tabs, Tab} from 'react-bootstrap';\nimport {myFilledOrdersSelector,\n    myFilledOrdersLoadedSelector,\n    myOpenOrdersLoadedSelector,\n    myOpenOrdersSelector,\n    orderCancellingSelector\n} from '../store/selectors/orders';\nimport {exchangeSelector} from '../store/selectors/contracts';\nimport {accountSelector} from '../store/selectors/web3';\nimport {cancelOrder} from '../store/interactions/orders';\n\nconst showMyFilledOrders = (myFilledOrders) => {\n    return (\n        <tbody>\n            {myFilledOrders.map((order) => {\n                return (\n                    <tr key={`filled-${order._id}`}>\n                        <td className=\"text-muted\">{order.formattedTimestamp}</td>\n                        <td className={`text-${order.orderTypeClass}`}>{order.orderSign}{order.tokenAmount}</td>\n                        <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\n                    </tr>\n                )\n            })}\n        </tbody>\n    );\n}\n\nconst showMyOpenOrders = (props) => {\n    const {myOpenOrders, dispatch, exchange, account} = props\n    return (\n        <tbody>\n            {myOpenOrders.map((order) => {\n                return (\n                    <tr key={`open-${order._id}`}>\n                        <td className={`text-${order.orderTypeClass}`}>{order.tokenAmount}</td>\n                        <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\n                        <td \n                            className=\"text-muted cancel-order\"\n                            onClick={(e) => {\n                                cancelOrder(dispatch, exchange, order, account);\n                            }}\n                        >x</td>\n                    </tr>\n                )\n            })}\n        </tbody>\n    );\n}\n\nclass MyTransactions extends Component {\n    render() {\n        return (\n            <div className=\"card bg-dark text-white\">\n                <div className=\"card-header\">\n                    My Transactions\n                </div>\n                <div className=\"card-body\">\n                    <Tabs defaultActiveKey=\"trades\" className=\"bg-dark text-white\">\n                        <Tab eventKey=\"trades\" title=\"Trades\" className=\"bg-dark\">\n                            <table className=\"table table-dark table-sm small\">\n                                <thead>\n                                    <tr>\n                                        <th>Time</th>\n                                        <th>DAPP</th>\n                                        <th>DAPP/ETH</th>\n                                    </tr>\n                                </thead>\n                                {this.props.showMyFilledOrders ? showMyFilledOrders(this.props.myFilledOrders) : <Spinner type=\"table\" />}\n                            </table>\n                        </Tab>\n                        <Tab eventKey=\"orders\" title=\"Orders\" className=\"bg-dark\">\n                            <table className=\"table table-dark table-sm small\">\n                                <thead>\n                                    <tr>\n                                        <th>Amount</th>\n                                        <th>DAPP/ETH</th>\n                                        <th>Cancel</th>\n                                    </tr>\n                                </thead>\n                                {this.props.showMyOpenOrders ? showMyOpenOrders(this.props) : <Spinner type=\"table\" />}\n                            </table>\n                        </Tab>\n                    </Tabs>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    const openOrdersLoaded = myOpenOrdersLoadedSelector(state);\n    const orderCancelling = orderCancellingSelector(state);\n\n    return {\n        myFilledOrders: myFilledOrdersSelector(state),\n        showMyFilledOrders: myFilledOrdersLoadedSelector(state),\n        myOpenOrders: myOpenOrdersSelector(state),\n        showMyOpenOrders: openOrdersLoaded && !orderCancelling,\n        exchange: exchangeSelector(state),\n        account: accountSelector(state)\n    };\n}\n\nexport default connect(mapStateToProps)(MyTransactions);","export const chartOptions = {\n    chart: {\n      animations: { enabled: false },\n      toolbar: { show: false },\n      width: '100px'\n    },\n    tooltip: {\n      enabled: true,\n      theme: false,\n      style: {\n        fontSize: '12px',\n        fontFamily: undefined\n      },\n      x: {\n          show: false,\n          format: 'dd MMM',\n          formatter: undefined,\n      },\n      y: {\n        show: true,\n        title: 'price'\n      },\n      marker: {\n        show: false,\n      },\n      items: {\n         display: 'flex',\n      },\n      fixed: {\n          enabled: false,\n          position: 'topRight',\n          offsetX: 0,\n          offsetY: 0,\n      },\n    },\n    xaxis: {\n      type: 'datetime',\n      labels: {\n        show: true,\n        style: {\n            colors: '#fff',\n            fontSize: '8px',\n            cssClass: 'apexcharts-xaxis-label',\n        },\n      },\n    },\n    yaxis: {\n      labels: {\n        show: true,\n        minWidth: 0,\n        maxWidth: 160,\n        style: {\n          color: '#fff',\n          fontSize: '8px',\n          cssClass: 'apexcharts-yaxis-label',\n        },\n        offsetX: 0,\n        offsetY: 0,\n        rotate: 0,\n      }\n    }\n  }\n  \n  export const dummyData = [\n    {\n      data: [\n        {\n          x: new Date(1538778600000),\n          y: [6629.81, 6650.5, 6623.04, 6633.33]\n        },\n        {\n          x: new Date(1538780400000),\n          y: [6632.01, 6643.59, 6620, 6630.11]\n        },\n        {\n          x: new Date(1538782200000),\n          y: [6630.71, 6648.95, 6623.34, 6635.65]\n        },\n        {\n          x: new Date(1538784000000),\n          y: [6635.65, 6651, 6629.67, 6638.24]\n        },\n        {\n          x: new Date(1538785800000),\n          y: [6638.24, 6640, 6620, 6624.47]\n        },\n        {\n          x: new Date(1538787600000),\n          y: [6624.53, 6636.03, 6621.68, 6624.31]\n        },\n        {\n          x: new Date(1538789400000),\n          y: [6624.61, 6632.2, 6617, 6626.02]\n        },\n        {\n          x: new Date(1538791200000),\n          y: [6627, 6627.62, 6584.22, 6603.02]\n        },\n        {\n          x: new Date(1538793000000),\n          y: [6605, 6608.03, 6598.95, 6604.01]\n        },\n        {\n          x: new Date(1538794800000),\n          y: [6604.5, 6614.4, 6602.26, 6608.02]\n        },\n        {\n          x: new Date(1538796600000),\n          y: [6608.02, 6610.68, 6601.99, 6608.91]\n        },\n        {\n          x: new Date(1538798400000),\n          y: [6608.91, 6618.99, 6608.01, 6612]\n        },\n        {\n          x: new Date(1538800200000),\n          y: [6612, 6615.13, 6605.09, 6612]\n        },\n        {\n          x: new Date(1538802000000),\n          y: [6612, 6624.12, 6608.43, 6622.95]\n        },\n        {\n          x: new Date(1538803800000),\n          y: [6623.91, 6623.91, 6615, 6615.67]\n        },\n        {\n          x: new Date(1538805600000),\n          y: [6618.69, 6618.74, 6610, 6610.4]\n        },\n        {\n          x: new Date(1538807400000),\n          y: [6611, 6622.78, 6610.4, 6614.9]\n        },\n        {\n          x: new Date(1538809200000),\n          y: [6614.9, 6626.2, 6613.33, 6623.45]\n        },\n        {\n          x: new Date(1538811000000),\n          y: [6623.48, 6627, 6618.38, 6620.35]\n        },\n        {\n          x: new Date(1538812800000),\n          y: [6619.43, 6620.35, 6610.05, 6615.53]\n        },\n        {\n          x: new Date(1538814600000),\n          y: [6615.53, 6617.93, 6610, 6615.19]\n        },\n        {\n          x: new Date(1538816400000),\n          y: [6615.19, 6621.6, 6608.2, 6620]\n        },\n        {\n          x: new Date(1538818200000),\n          y: [6619.54, 6625.17, 6614.15, 6620]\n        },\n        {\n          x: new Date(1538820000000),\n          y: [6620.33, 6634.15, 6617.24, 6624.61]\n        },\n        {\n          x: new Date(1538821800000),\n          y: [6625.95, 6626, 6611.66, 6617.58]\n        },\n        {\n          x: new Date(1538823600000),\n          y: [6619, 6625.97, 6595.27, 6598.86]\n        },\n        {\n          x: new Date(1538825400000),\n          y: [6598.86, 6598.88, 6570, 6587.16]\n        },\n        {\n          x: new Date(1538827200000),\n          y: [6588.86, 6600, 6580, 6593.4]\n        },\n        {\n          x: new Date(1538829000000),\n          y: [6593.99, 6598.89, 6585, 6587.81]\n        },\n        {\n          x: new Date(1538830800000),\n          y: [6587.81, 6592.73, 6567.14, 6578]\n        },\n        {\n          x: new Date(1538832600000),\n          y: [6578.35, 6581.72, 6567.39, 6579]\n        },\n        {\n          x: new Date(1538834400000),\n          y: [6579.38, 6580.92, 6566.77, 6575.96]\n        },\n        {\n          x: new Date(1538836200000),\n          y: [6575.96, 6589, 6571.77, 6588.92]\n        },\n        {\n          x: new Date(1538838000000),\n          y: [6588.92, 6594, 6577.55, 6589.22]\n        },\n        {\n          x: new Date(1538839800000),\n          y: [6589.3, 6598.89, 6589.1, 6596.08]\n        },\n        {\n          x: new Date(1538841600000),\n          y: [6597.5, 6600, 6588.39, 6596.25]\n        },\n        {\n          x: new Date(1538843400000),\n          y: [6598.03, 6600, 6588.73, 6595.97]\n        },\n        {\n          x: new Date(1538845200000),\n          y: [6595.97, 6602.01, 6588.17, 6602]\n        },\n        {\n          x: new Date(1538847000000),\n          y: [6602, 6607, 6596.51, 6599.95]\n        },\n        {\n          x: new Date(1538848800000),\n          y: [6600.63, 6601.21, 6590.39, 6591.02]\n        },\n        {\n          x: new Date(1538850600000),\n          y: [6591.02, 6603.08, 6591, 6591]\n        },\n        {\n          x: new Date(1538852400000),\n          y: [6591, 6601.32, 6585, 6592]\n        },\n        {\n          x: new Date(1538854200000),\n          y: [6593.13, 6596.01, 6590, 6593.34]\n        },\n        {\n          x: new Date(1538856000000),\n          y: [6593.34, 6604.76, 6582.63, 6593.86]\n        },\n        {\n          x: new Date(1538857800000),\n          y: [6593.86, 6604.28, 6586.57, 6600.01]\n        },\n        {\n          x: new Date(1538859600000),\n          y: [6601.81, 6603.21, 6592.78, 6596.25]\n        },\n        {\n          x: new Date(1538861400000),\n          y: [6596.25, 6604.2, 6590, 6602.99]\n        },\n        {\n          x: new Date(1538863200000),\n          y: [6602.99, 6606, 6584.99, 6587.81]\n        },\n        {\n          x: new Date(1538865000000),\n          y: [6587.81, 6595, 6583.27, 6591.96]\n        },\n        {\n          x: new Date(1538866800000),\n          y: [6591.97, 6596.07, 6585, 6588.39]\n        },\n        {\n          x: new Date(1538868600000),\n          y: [6587.6, 6598.21, 6587.6, 6594.27]\n        },\n        {\n          x: new Date(1538870400000),\n          y: [6596.44, 6601, 6590, 6596.55]\n        },\n        {\n          x: new Date(1538872200000),\n          y: [6598.91, 6605, 6596.61, 6600.02]\n        },\n        {\n          x: new Date(1538874000000),\n          y: [6600.55, 6605, 6589.14, 6593.01]\n        },\n        {\n          x: new Date(1538875800000),\n          y: [6593.15, 6605, 6592, 6603.06]\n        },\n        {\n          x: new Date(1538877600000),\n          y: [6603.07, 6604.5, 6599.09, 6603.89]\n        },\n        {\n          x: new Date(1538879400000),\n          y: [6604.44, 6604.44, 6600, 6603.5]\n        },\n        {\n          x: new Date(1538881200000),\n          y: [6603.5, 6603.99, 6597.5, 6603.86]\n        },\n        {\n          x: new Date(1538883000000),\n          y: [6603.85, 6605, 6600, 6604.07]\n        },\n        {\n          x: new Date(1538884800000),\n          y: [6604.98, 6606, 6604.07, 6606]\n        },\n      ]\n    }\n  ]\n  ","import moment from 'moment';\nimport {groupBy, maxBy, minBy} from 'lodash';\n\nexport const buildGraphData = (orders) => {\n    orders = groupBy(orders, (o) => moment.unix(o._timestamp).startOf('hour').format());\n    const hours = Object.keys(orders);\n    \n    const graphData = hours.map((hour) => {\n        // calculate open, low, high, close\n        const hourGroup = orders[hour];\n        const open = hourGroup[0];\n        const close = hourGroup[hourGroup.length-1];\n        const high = maxBy(hourGroup, 'tokenPrice');\n        const low = minBy(hourGroup, 'tokenPrice');\n        return ({\n            x: new Date(hour),\n            y: [open.tokenPrice, high.tokenPrice, low.tokenPrice, close.tokenPrice]\n        });\n    });\n    return graphData;\n}","import {get} from 'lodash';\nimport {createSelector} from 'reselect';\nimport {decorateFilledOrders} from './decorators/orders';\nimport {buildGraphData} from './decorators/priceChart';\nimport {filledOrdersLoaded, filledOrders} from './orders';\n\nexport const priceChartLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded);\nexport const priceChartSelector = createSelector(\n    filledOrders,\n    (orders) => {\n        //ascending date, earliest to latest\n        orders = orders.sort((a,b) => a._timestamp - b._timestamp);\n        //decorate\n        orders = decorateFilledOrders(orders);\n        let lastOrder = orders[orders.length-1];\n        let secondLastOrder = orders[orders.length-2];\n        let lastPrice = get(lastOrder, 'tokenPrice', 0);\n        let secondLastPrice = get(secondLastOrder, 'tokenPrice', 0);\n\n        return ({\n            lastPrice,\n            lastPriceChange: (lastPrice >= secondLastPrice) ? '+' : '-',\n            series: [{\n                data: buildGraphData(orders)\n            }]\n        });\n    }\n)","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Spinner from './Spinner';\nimport Chart from 'react-apexcharts';\nimport {chartOptions} from './PriceChart.config';\nimport {priceChartLoadedSelector, priceChartSelector} from '../store/selectors/priceChart';\n\nconst priceSymbol = (lastPriceChange) => {\n    let output;\n    if(lastPriceChange === '+') {\n        output = <span className=\"text-success\">&#9650;</span> // Green up tiangle\n    } else {\n        output = <span className=\"text-danger\">&#9660;</span> // Red down triangle\n    }\n    return(output);\n}\n\nconst showPriceChart = (priceChart) => {\n    return (\n        <div className=\"price-chart\">\n            <h4>DAPP/ETH &nbsp; {priceSymbol(priceChart.lastPriceChange)} &nbsp; {priceChart.lastPrice}</h4>\n            <Chart options={chartOptions} series={priceChart.series} type=\"candlestick\" width=\"100%\" height=\"100%\" />\n        </div>\n    );\n}\n\nclass PriceChart extends Component {\n    render() {\n        return (\n            <div className=\"card bg-dark text-white\">\n                <div className=\"card-header\">\n                    Graph\n                </div>\n                <div className=\"card-body\">\n                    {(this.props.showChart) ? showPriceChart(this.props.chartData) : <Spinner type=\"div\" />}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        showChart: priceChartLoadedSelector(state),\n        chartData: priceChartSelector(state)\n    }\n}\n\nexport default connect(mapStateToProps)(PriceChart);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nclass BalanceForm extends Component {\n    render(){\n        const {onSubmit, placeHolder, onChange, buttonText} = this.props;\n        return (\n            <form className=\"row\" onSubmit={onSubmit}>\n                <div className=\"col-12 col-sm pr-sm-2\">\n                    <input type=\"number\" \n                        placeholder={placeHolder} \n                        onChange={onChange}\n                        className=\"form-control form-control-sm bg-dark text-white\"\n                        required />\n                </div>\n                <div className=\"col-12 col-sm-auto pl-sm-0\">\n                    <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm\">{buttonText}</button>\n                </div>\n            </form>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {}\n}\n\nexport default connect(mapStateToProps)(BalanceForm);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nconst tableRow = (tokenName, walletAmount, exchangeAmount) => {\n    return (\n        <tr>\n            <th>{tokenName}</th>\n            <th>{walletAmount.toString()}</th>\n            <th>{exchangeAmount.toString()}</th>\n        </tr>\n    )\n}\n\nconst tableHead = () => {\n    return (\n        <thead>\n            <tr>\n                <th>Token</th>\n                <th>Wallet</th>\n                <th>Exchange</th>\n            </tr>\n        </thead>\n    );\n}\n\nclass BalanceTable extends Component {\n    render() {\n        const {hasHead, tokenName, walletAmount, exchangeAmount} = this.props;\n        return (\n            <table className=\"table table-dark table-sm small\">\n                {(hasHead) ? tableHead() : null}\n                <tbody>\n                    {tableRow(tokenName, walletAmount, exchangeAmount)}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {}\n}\n\nexport default connect(mapStateToProps)(BalanceTable);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Tabs, Tab} from 'react-bootstrap';\nimport Spinner from './Spinner';\nimport { exchangeSelector, \n    tokenSelector, \n    tokenBalanceSelector, \n    exchangeEtherBalanceSelector, \n    exchangeTokenBalanceSelector, \n    balancesLoadingSelector, \n    etherDepositAmountSelector,\n    etherWithdrawAmountSelector,\n    tokenDepositAmountSelector,\n    tokenWithdrawAmountSelector\n} from '../store/selectors/contracts';\nimport { web3Selector, accountSelector, etherBalanceSelector } from '../store/selectors/web3';\nimport { loadBalances, depositEther, withdrawEther, depositToken, withdrawToken} from '../store/interactions/contracts';\nimport { etherDepositAmountChanged, etherWithdrawAmountChanged, tokenDepositAmountChanged, tokenWithdrawAmountChanged } from '../store/actions';\nimport BalanceForm from './BalanceForm';\nimport BalanceTable from './BalanceTable';\n\n\nconst showForm = (props) => {\n    const {dispatch, etherBalance, tokenBalance, exchangeEtherBalance, exchangeTokenBalance, \n        etherDepositAmount, etherWithdrawAmount, tokenDepositAmount, tokenWithdrawAmount,\n        web3, exchange, token, account\n    } = props;\n\n    const depositEtherSubmit = (e) => {\n        e.preventDefault();\n        depositEther(web3, exchange, account, etherDepositAmount, dispatch);\n    }\n    const depositEtherChange = (e) => dispatch(etherDepositAmountChanged(e.target.value));\n\n    const depositTokenSubmit = (e) => {\n        e.preventDefault();\n        depositToken(web3, exchange, token, account, tokenDepositAmount, dispatch);\n    }\n    const depositTokenChange = (e) => dispatch(tokenDepositAmountChanged(e.target.value));\n\n    const withdrawEtherSubmit = (e) => {\n        e.preventDefault();\n        withdrawEther(web3, exchange, account, etherWithdrawAmount, dispatch);\n    }\n    const withdrawEtherChange = (e) => dispatch(etherWithdrawAmountChanged(e.target.value));\n\n    const withdrawTokenSubmit = (e) => {\n        e.preventDefault();\n        withdrawToken(web3, exchange, token, account, tokenWithdrawAmount, dispatch);\n    }\n    const withdrawTokenChange = (e) => dispatch(tokenWithdrawAmountChanged(e.target.value));\n\n    return (\n        <Tabs defaultActiveKey={\"deposit\"} className={\"bg-dark text-white\"}>\n            <Tab eventKey={\"deposit\"} title={\"Deposit\"} className={\"bg-dark\"}>\n                <BalanceTable hasHead={true} tokenName={\"ETH\"} walletAmount={etherBalance} exchangeAmount={exchangeEtherBalance} />\n                <BalanceForm \n                    onSubmit={depositEtherSubmit} \n                    placeHolder={\"ETH Amount\"}\n                    onChange={depositEtherChange}\n                    buttonText={\"Deposit\"}\n                />\n                <BalanceTable hasHead={false} tokenName={\"DAPP\"} walletAmount={tokenBalance} exchangeAmount={exchangeTokenBalance} />\n                <BalanceForm \n                    onSubmit={depositTokenSubmit} \n                    placeHolder={\"Token Amount\"} \n                    onChange={depositTokenChange}\n                    buttonText={\"Deposit\"}  \n                />\n            </Tab>\n            <Tab eventKey={\"withdraw\"} title={\"Withdraw\"} className={\"bg-dark\"}>\n                <BalanceTable hasHead={true} tokenName={\"ETH\"} walletAmount={etherBalance} exchangeAmount={exchangeEtherBalance} />\n                <BalanceForm \n                    onSubmit={withdrawEtherSubmit} \n                    placeHolder={\"ETH Amount\"} \n                    onChange={withdrawEtherChange}\n                    buttonText={\"Withdraw\"}    \n                />\n                <BalanceTable hasHead={false} tokenName={\"DAPP\"} walletAmount={tokenBalance} exchangeAmount={exchangeTokenBalance} />\n                <BalanceForm \n                    onSubmit={withdrawTokenSubmit} \n                    placeHolder={\"Token Amount\"} \n                    onChange={withdrawTokenChange}\n                    buttonText={\"Withdraw\"}    \n                />\n            </Tab>\n        </Tabs>\n    )\n}\n\nclass Balance extends Component {\n\n    componentWillMount() {\n        this.loadBlockchainData();\n    }\n\n    async loadBlockchainData() {\n        const {dispatch, exchange, token, account, web3} = this.props;\n        await loadBalances(web3, exchange, token, account, dispatch);\n    }\n\n    render() {\n        return (\n            <div className=\"card bg-dark text-white\">\n                <div className=\"card-header\">\n                    Balance\n                </div>\n                <div className=\"card-body\">\n                    {this.props.showForm ? showForm(this.props) : <Spinner />}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    const balancesLoading = balancesLoadingSelector(state)\n    return {\n        account: accountSelector(state),\n        exchange: exchangeSelector(state),\n        web3: web3Selector(state),\n        token: tokenSelector(state),\n        etherBalance: etherBalanceSelector(state),\n        tokenBalance: tokenBalanceSelector(state),\n        exchangeEtherBalance: exchangeEtherBalanceSelector(state),\n        exchangeTokenBalance: exchangeTokenBalanceSelector(state),\n        balancesLoading,\n        showForm: !balancesLoading,\n        etherDepositAmount: etherDepositAmountSelector(state),\n        etherWithdrawAmount: etherWithdrawAmountSelector(state),\n        tokenDepositAmount: tokenDepositAmountSelector(state),\n        tokenWithdrawAmount: tokenWithdrawAmountSelector(state)\n    }\n}\n\nexport default connect(mapStateToProps)(Balance);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nclass OrderForm extends Component {\n    render(){\n        const {onSubmit, amountOnChange, priceOnChange, buttonText, buyOrSell} = this.props;\n        return (\n            <form onSubmit={onSubmit}>\n                <div className=\"form-group small\">\n                    <label>{`${buyOrSell} Amount`}</label>\n                    <div className=\"input-group\">\n                        <input type=\"text\" \n                            placeholder=\"amount\"\n                            onChange={amountOnChange}\n                            className=\"form-control form-control-sm bg-dark text-white\"\n                            required />\n                    </div>\n                </div>\n                <div className=\"form-group small\">\n                    <label>{`${buyOrSell} Price`}</label>\n                    <div className=\"input-group\">\n                        <input type=\"text\" \n                            placeholder=\"price\"\n                            onChange={priceOnChange}\n                            className=\"form-control form-control-sm bg-dark text-white\"\n                            required />\n                    </div>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary btn-sm btn-block\">{buttonText}</button>\n            </form>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {};\n}\n\nexport default connect(mapStateToProps)(OrderForm);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Tabs, Tab} from 'react-bootstrap';\nimport {buyOrderSelector, sellOrderSelector} from '../store/selectors/orders';\nimport {web3Selector, accountSelector} from '../store/selectors/web3';\nimport {tokenSelector, exchangeSelector} from '../store/selectors/contracts';\nimport {makeBuyOrder, makeSellOrder} from '../store/interactions/orders';\nimport OrderForm from './OrderForm';\nimport {buyOrderAmountChanged, buyOrderPriceChanged, sellOrderAmountChanged, sellOrderPriceChanged} from '../store/actions';\nimport Spinner from './Spinner';\n\n\nconst showForm = (props) => {\n    const {dispatch, web3, exchange, token, account, buyOrder, sellOrder, showBuyTotal, showSellTotal} = props;\n    \n    const buyOrderOnSubmit = (e) => {\n        e.preventDefault();\n        makeBuyOrder(dispatch, exchange, token, web3, buyOrder, account);\n    }\n    const buyAmountChanged = (e) => dispatch(buyOrderAmountChanged(e.target.value));\n    const buyPriceChanged = (e) => dispatch(buyOrderPriceChanged(e.target.value));\n\n    const sellOrderOnSubmit = (e) => {\n        e.preventDefault();\n        makeSellOrder(dispatch, exchange, token, web3, sellOrder, account);\n    }\n    const sellAmountChanged = (e) => dispatch(sellOrderAmountChanged(e.target.value));\n    const sellPriceChanged = (e) => dispatch(sellOrderPriceChanged(e.target.value));\n\n    return (\n        <Tabs defaultActiveKey=\"buy\" className=\"bg-dark text-white\">\n            <Tab className=\"bg-dark\" title=\"Buy\" eventKey=\"buy\">\n                <OrderForm\n                    onSubmit={buyOrderOnSubmit}\n                    amountOnChange={buyAmountChanged}\n                    priceOnChange={buyPriceChanged}\n                    buttonText={\"Create Buy Order\"}\n                    buyOrSell={\"Buy\"}\n                />\n                { showBuyTotal ? <small>Total: {buyOrder.amount * buyOrder.price} ETH</small> : null }\n            </Tab>\n            <Tab className=\"bg-dark\" title=\"Sell\" eventKey=\"sell\">\n                <OrderForm\n                    onSubmit={sellOrderOnSubmit}\n                    amountOnChange={sellAmountChanged}\n                    priceOnChange={sellPriceChanged}\n                    buttonText={\"Create Sell Order\"}\n                    buyOrSell={\"Sell\"}\n                />\n                { showSellTotal ? <small>Total: {sellOrder.amount * sellOrder.price} ETH</small> : null }\n            </Tab>\n        </Tabs>\n    )\n}\n\nclass NewOrder extends Component {\n\n    render() {\n        return (\n            <div className=\"card bg-dark text-white\">\n                <div className=\"card-header\">\n                    New Order\n                </div>\n                <div className=\"card-body\">\n                    {showForm? showForm(this.props) : <Spinner type=\"div\" />}\n                </div>\n            </div>\n        );\n    }\n\n}\n\nfunction mapStateToProps(state){\n    const buyOrder = buyOrderSelector(state);\n    const sellOrder = sellOrderSelector(state);\n\n    return {\n        account: accountSelector(state),\n        exchange: exchangeSelector(state),\n        web3: web3Selector(state),\n        token: tokenSelector(state),\n        buyOrder,\n        sellOrder,\n        showForm: !buyOrder.making && !sellOrder.making,\n        showBuyTotal: buyOrder.amount && buyOrder.price,\n        showSellTotal: sellOrder.amount && sellOrder.price\n    }\n}\n\nexport default connect(mapStateToProps)(NewOrder);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport { exchangeSelector } from '../store/selectors/contracts';\nimport { subscribeToEvents } from '../store/interactions/subscriptions';\nimport { loadAllOrders } from '../store/interactions/orders';\nimport Trades from './Trades';\nimport OrderBook from './OrderBook';\nimport MyTransactions from './MyTransactions';\nimport PriceChart from './PriceChart';\nimport Balance from './Balance';\nimport NewOrder from './NewOrder';\n\nclass Content extends Component {\n\n\tcomponentWillMount() {\n\t\tthis.loadBlockchainData(this.props);\n\t}\n\n\tasync loadBlockchainData(props) {\n        const {exchange, dispatch} = props;\n        await loadAllOrders(dispatch, exchange);\n        await subscribeToEvents(dispatch, exchange);\n\t}\n\n    render() {\n        return (\n            <div className=\"content\">\n                <div className=\"vertical-split\">\n                    <Balance />\n                    <NewOrder />\n                </div>\n                <OrderBook />\n                <div className=\"vertical-split\">\n                    <PriceChart />\n                    <MyTransactions />\n                </div>\n                <Trades />\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        exchange: exchangeSelector(state)\n    }\n}\n\nexport default connect(mapStateToProps)(Content);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport './App.css';\nimport {loadWeb3, loadAccount} from '../store/interactions/web3';\nimport {loadToken, loadExchange} from '../store/interactions/contracts';\nimport Navbar from './Navbar';\nimport Content from './Content';\nimport { contractsLoadedSelector } from '../store/selectors/contracts';\n\n\nclass App extends Component {\n\n\tcomponentWillMount() {\n\t\t//dispatch auto-included in props with redux in react\n\t\tthis.loadBlockchainData(this.props.dispatch);\n\t}\n\n\tasync loadBlockchainData(dispatch) {\n\t\tconst web3 = loadWeb3(dispatch);\n\t\tconst networkId = await web3.eth.net.getId();\n\t\tawait loadAccount(web3, dispatch);\n\t\tconst token = await loadToken(web3, networkId, dispatch);\n\t\tif (!token) {\n\t\t\talert('Token not loaded, please load a network with token');\n\t\t}\n\t\tconst exchange = await loadExchange(web3, networkId, dispatch);\n\t\tif (!exchange) {\n\t\t\talert('Exchange not loaded, please load a network with exchange');\n\t\t}\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Navbar />\n\t\t\t\t{this.props.contractsLoaded ? <Content /> : <div className=\"content\"></div>}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// Makes state vars accessible in props\nfunction mapStateToProps(state){\n\treturn {\n\t\tcontractsLoaded: contractsLoadedSelector(state)\n\t}\n}\n\nexport default connect(mapStateToProps)(App);\n","import {combineReducers} from 'redux';\n\nfunction web3(state = {}, action) {\n    switch (action.type) {\n        case 'WEB3_LOADED':\n            return { ...state, connection: action.connection};\n        case 'WEB3_ACCOUNT_LOADED':\n            return { ...state, account: action.account};\n        case 'ETHER_BALANCE_LOADED':\n                return { ...state, balance: action.balance }\n        default:\n            return state;\n    }\n}\n\nfunction token(state = {}, action) {\n    switch (action.type) {\n        case 'TOKEN_LOADED':\n            return { ...state, loaded: true, contract: action.token};  \n        case 'TOKEN_BALANCE_LOADED':\n                return { ...state, balance: action.balance }  \n        default:\n            return state;\n    }\n}\n\nfunction exchange(state = {}, action) {\n    let index, data;\n    switch (action.type) {\n        case 'EXCHANGE_LOADED':\n            return { ...state, loaded: true, contract: action.exchange};\n        case 'CANCELLED_ORDERS_LOADED':\n            return { ...state, cancelledOrders: {loaded: true, data: action.cancelledOrders }};  \n        case 'ORDERS_LOADED':\n            return { ...state, orders: {loaded: true, data: action.orders }};      \n        case 'TRADES_LOADED':\n            return { ...state, trades: {loaded: true, data: action.trades }};\n        case 'ORDER_CANCELLING':\n            return { ...state, orderCancelling: true };\n        case 'ORDER_CANCELLED':\n            return { \n                ...state, \n                orderCancelling: false,\n                cancelledOrders: {\n                    ...state.cancelledOrders,\n                    data: [\n                        ...state.cancelledOrders.data,\n                        action.order\n                    ]\n                }\n            };\n        case 'ORDER_FILLING':\n            return { ...state, orderFilling: true };\n        case 'ORDER_FILLED':\n            //prevent duplicates in the redux store\n            index = state.trades.data.findIndex(order => order._id === action.order._id);\n            data = state.trades.data;\n            //if it doesn't already exist, add to the store\n            if (index === -1){\n                data = [...state.trades.data, action.order];\n            }\n            return {\n                ...state,\n                orderFilling:false,\n                trades: {\n                    ...state.trades,\n                    data\n                }\n            }\n        case 'EXCHANGE_ETHER_BALANCE_LOADED':\n            return { ...state, etherBalance: action.balance }\n        case 'EXCHANGE_TOKEN_BALANCE_LOADED':\n            return { ...state, tokenBalance: action.balance }\n        case 'BALANCES_LOADING':\n            return { ...state, balancesLoading: true }\n        case 'BALANCES_LOADED':\n            return { ...state, balancesLoading: false }\n        case 'ETHER_DEPOSIT_AMOUNT_CHANGED':\n            return { ...state, etherDepositAmount: action.amount}\n        case 'ETHER_WITHDRAW_AMOUNT_CHANGED':\n            return { ...state, etherWithdrawAmount: action.amount}\n        case 'TOKEN_DEPOSIT_AMOUNT_CHANGED':\n                return { ...state, tokenDepositAmount: action.amount}\n        case 'TOKEN_WITHDRAW_AMOUNT_CHANGED':\n            return { ...state, tokenWithdrawAmount: action.amount}\n        case 'BUY_ORDER_AMOUNT_CHANGED':\n            return { ...state, buyOrder: { ...state.buyOrder, amount: action.amount } }\n        case 'BUY_ORDER_PRICE_CHANGED':\n            return { ...state, buyOrder: { ...state.buyOrder, price: action.price } }\n        case 'BUY_ORDER_MAKING':\n            return { ...state, buyOrder: { ...state.buyOrder, amount: null, price: null, making: true} }\n        case 'SELL_ORDER_AMOUNT_CHANGED':\n            return { ...state, sellOrder: { ...state.sellOrder, amount: action.amount } }\n        case 'SELL_ORDER_PRICE_CHANGED':\n            return { ...state, sellOrder: { ...state.sellOrder, price: action.price } }\n        case 'SELL_ORDER_MAKING':\n            return { ...state, sellOrder: { ...state.sellOrder, amount: null, price: null, making: true} }\n        case 'ORDER_MADE':\n            //prevent duplicates in the redux store\n            index = state.orders.data.findIndex(order => order._id === action.order._id);\n            data = state.orders.data;\n            if (index === -1){\n                data = [...state.orders.data, action.order];\n            }\n            return {\n                ...state,\n                orders: {\n                    ...state.orders,\n                    data\n                },\n                buyOrder: {\n                    ...state.buyOrder,\n                    making:false\n                },\n                sellOrder: {\n                    ...state.sellOrder,\n                    making:false\n                }\n            }\n        default:\n            return state;\n    }\n}\n\n\nconst rootReducer = new combineReducers({\n    web3,\n    token,\n    exchange\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from \"redux\";\nimport { createLogger }  from \"redux-logger\";\nimport rootReducer from \"./reducers\";\n\nconst loggerMiddleware = createLogger();\nconst middleware = [];\n\n//connects redux browser to app\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default function configureStore(preLoadedState){\n    return createStore(\n        rootReducer, \n        preLoadedState,\n        composeEnhancers(applyMiddleware(...middleware, loggerMiddleware))\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './components/App';\nimport configureStore from './store/configureStore';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}